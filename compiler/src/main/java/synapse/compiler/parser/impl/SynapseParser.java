/* Generated By:JavaCC: Do not edit this line. SynapseParser.java */
package synapse.compiler.parser.impl;

import java.io.*;
import synapse.lang.model.*;
import synapse.compiler.parser.model.*;
import synapse.compiler.parser.*;

public final class SynapseParser implements SynapseParserConstants {

    private ParserDelegate parserDelegate;

    public SynapseParser(ParserDelegate parserDelegate, InputStream stream, String encoding) {
        this(stream, encoding);

        assert parserDelegate != null : "Parser delegate can't be null";

        this.parserDelegate = parserDelegate;
    }

  final public void Root() throws ParseException {
    Class();
  }

  final public void Class() throws ParseException {
    final Token classNameToken;
    final ClassDelegate cd;
    jj_consume_token(CLASS);
    classNameToken = jj_consume_token(IDENTIFIER);
                                            cd = parserDelegate.beginClass(classNameToken.image);
    ClassStateSpec(cd);
    jj_consume_token(LBRACE);
    ClassReceptorList(cd);
    jj_consume_token(RBRACE);
          cd.complete();
  }

  final public void ClassStateSpec(final ClassDelegate cd) throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      FieldList(cd);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ClassReceptorList(final ClassDelegate cd) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Receptor(cd);
    }
  }

  final public void Receptor(final ClassDelegate cd) throws ParseException {
    final Token receptorNameToken;
    final ReceptorDelegate rd;
    receptorNameToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
                                           rd = cd.beginReceptor(receptorNameToken.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MessagePatternList(rd);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(MAP);
    jj_consume_token(RBRACE);
          rd.complete();
  }

  final public void MessagePatternList(ReceptorDelegate rd) throws ParseException {
    Pattern(rd);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      Pattern(rd);
    }
  }

  final public void Pattern(ReceptorDelegate rd) throws ParseException {
    TypedVariablePattern(rd);
  }

  final public void TypedVariablePattern(ReceptorDelegate rd) throws ParseException {
    final Token variableNameToken;
    final Token variableTypeToken;
    variableNameToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    variableTypeToken = jj_consume_token(IDENTIFIER);
        rd.beginMessageFieldPattern().typedVariable(variableNameToken.image, variableTypeToken.image);
  }

  final public void FieldList(final FieldDelegate fd) throws ParseException {
    Field(fd);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      Field(fd);
    }
  }

  final public void Field(final FieldDelegate fd) throws ParseException {
    final Token fieldNameToken;
    final Token typeNameToken;
    fieldNameToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    typeNameToken = jj_consume_token(IDENTIFIER);
      fd.addField(fieldNameToken.image, typeNameToken.image);
  }

  /** Generated Token Manager. */
  public SynapseParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x4000,0x4000,0x400,0x400,};
   }

  /** Constructor with InputStream. */
  public SynapseParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SynapseParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SynapseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SynapseParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SynapseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SynapseParser(SynapseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SynapseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
